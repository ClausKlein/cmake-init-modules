name: Continuous Integration

on:
  push:
    branches:
    - master
    - develop

  pull_request:
    branches:
    - develop

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-17 }

    # To enable coverage, delete the last line from the conditional below and
    # edit the "<name>" placeholder to your GitHub name.
    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == '<name>'
      && false

    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-17
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        clangformat: true
        clangtidy: true
        cmake: true
        # NO! conan: true
        gcovr: true
        ninja: true
        # ...

    - name: Install dependencies
      shell: bash
      run: |
        # NO! pip3 install conan cmake ninja gcovr
        bash < .github/scripts/conan-profile.sh
        # conan install . -b missing

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      # run: cmake --build build/coverage -t coverage
      run: gcovr .

    # - name: Submit to codecov.io
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-17 }

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-17
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        clangformat: true
        clangtidy: true
        cmake: true
        # NO! conan: true
        gcovr: true
        ninja: true
        # ...

    - name: Install dependencies
      shell: bash
      run: |
        # NO! pip3 install conan cmake ninja gcovr
        bash < .github/scripts/conan-profile.sh
        # conan install . -b missing

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      fail-fast: false

      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      if: matrix.os != 'macos-14'
      uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Install llvm-17
      if: matrix.os == 'macos-14'
      run: |
        brew install conan gcovr ninja llvm
        echo $(brew --prefix llvm@17)/bin
        echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.profile
        export PATH=$(brew --prefix llvm@17)/bin:$PATH && echo "PATH=$PATH" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Setup Cpp
      if: matrix.os == 'ubuntu-22.04'
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-17
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        clangformat: true
        clangtidy: true
        cmake: true
        # NO! conan: true
        gcovr: true
        ninja: true
        # ...

    - name: Install dependencies
      shell: bash
      run: |
        # pip3 install conan cmake ninja gcovr
        bash < .github/scripts/conan-profile.sh
        # conan install . -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure preset
      if: matrix.os != 'windows-2022'
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -D BUILD_SHARED_LIBS=${{ matrix.shared }}

    - name: Configure on windows
      if: matrix.os == 'windows-2022'
      shell: pwsh
      run: cmake -G "Visual Studio 17 2022" -S . -B build -D CMAKE_BUILD_TYPE=Release
        -D CMAKE_INSTALL_PREFIX=$(Get-Location)/stagedir -D BUILD_SHARED_LIBS=${{ matrix.shared }}

    - name: Setup PATH
      if: matrix.os == 'windows-2022' && matrix.type == 'shared'
      run: Add-Content "$env:GITHUB_PATH" "$(Get-Location)\build\Release"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix stagedir

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

    - name: TestInstalledVersion
      if: matrix.os != 'windows-2022'
      run: |
        cmake -B example/build -S example -G Ninja -D CMAKE_BUILD_TYPE=Release \
            -D "CMAKE_PREFIX_PATH=$PWD/stagedir;$PWD/conan" \
            # --toolchain "$PWD/conan/conan_toolchain.cmake"
        ninja -C example/build
        ninja -C example/build test

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == '<name>'
      && false

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments cmake ninja

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
